service: meetup_aws
app: meetup_aws-app
org: gggoca

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${self:custom.user}
  region: eu-west-1

custom:
  user: ${env:USER, 'gggoca'}

functions:
  # lambda with api as trigger
  api-triggered-lambda:
    handler: lambdas/api-triggered-lambda.HelloYou
    events:
      - http:
          path: HelloYou
          method: post
    description: Lambda triggered by api gateway
  # lambda with s3 as trigger
  s3-triggered-lambda:
    handler: lambdas/s3-triggered-lambda.HelloYou
    events:
      - existingS3: 
         bucket: MeetupBucket
         events:
           - s3:ObjectCreated:*
         rules:
           #- prefix: upload/  use if u want folder in bucket
           - suffix: .jpg
    description: Lambda triggered by placing file into S3
  # lambda with SQS as trigger
  sqs-triggered-lambda:
    handler: lambdas/sqs-triggered-lambda.HelloYou
    events:
     - sqs:
         arn: arn:aws:sqs:region:XXXXXX:meetup-queue
         batchSize: 1
    description: Lambda triggered by SQS message
  # lambda without trigger
  just-lambda:
    handler: lambdas/just-lambda.HelloYou
    description: Lambda without trigger
  # lambda with input
  with-input-lambda:
    handler: lambdas/with-input-lambda.HelloYou
    descripton: Lambda taht requires input

resources:
  Resources:
    MeetupBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: meetup-bucket
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
    MeetupQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: meetup-queue
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt MeetupQueueDeadLetter.Arn
          maxReceiveCount: 3    
# maybe expande to this but focus on lambdas
#stepFunctions:
  #stateMachines: